[{"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\App.tsx":"1","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Dashboard\\index.tsx":"2","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\routes\\index.tsx":"3","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Dashboard\\styled.ts":"4","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\styles\\global.ts":"5","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\index.tsx":"6","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Repository\\index.tsx":"7","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\services\\api.ts":"8","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Repository\\styles.ts":"9"},{"size":323,"mtime":1610668896929,"results":"10","hashOfConfig":"11"},{"size":3206,"mtime":1612623467110,"results":"12","hashOfConfig":"11"},{"size":436,"mtime":1612621555364,"results":"13","hashOfConfig":"11"},{"size":2309,"mtime":1612618651346,"results":"14","hashOfConfig":"11"},{"size":648,"mtime":1610728120858,"results":"15","hashOfConfig":"11"},{"size":410,"mtime":1610665866225,"results":"16","hashOfConfig":"11"},{"size":3424,"mtime":1612625781750,"results":"17","hashOfConfig":"11"},{"size":125,"mtime":1612616268236,"results":"18","hashOfConfig":"11"},{"size":2370,"mtime":1612623573032,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"glpmf8",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\App.tsx",["39"],"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Dashboard\\index.tsx",["40"],"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\routes\\index.tsx",[],"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Dashboard\\styled.ts",[],"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\styles\\global.ts",[],"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\index.tsx",[],"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Repository\\index.tsx",["41","42"],"import React, { useEffect, useState } from 'react';\r\nimport { useRouteMatch, Link } from 'react-router-dom';\r\nimport { FiChevronLeft,FiChevronRight } from 'react-icons/fi';\r\n\r\nimport api from '../../services/api';\r\n\r\nimport logoImg from '../../assets/logo.svg';\r\n\r\nimport { Header, RepositoryInfo, Issues } from './styles';\r\nimport { title } from 'process';\r\n\r\ninterface RepositoryParams { \r\n    repository: string;\r\n}\r\n\r\ninterface IRepository {\r\n    full_name: string;\r\n    description: string;\r\n    stargazers_count: number;\r\n    forks_count: number;\r\n    open_issues_count: number;\r\n    owner: {\r\n        login: string;\r\n        avatar_url: string;\r\n    };\r\n}\r\n\r\ninterface Issue {\r\n    id: number;\r\n    title: string;\r\n    html_url: string;\r\n    user: {\r\n        login: string;\r\n    };\r\n}\r\n\r\nconst Repository: React.FC = () => {\r\n    const [repository, setRepository] = useState<IRepository | null>(null);\r\n    const [issues, setIssues] = useState<Issue[]>([]);\r\n\r\n    const { params } = useRouteMatch<RepositoryParams>();\r\n\r\n    useEffect(() => {\r\n        api.get(`/repos/${params.repository}`).then(response => {\r\n            setRepository(response.data);\r\n        });\r\n\r\n        api.get(`/repos/${params.repository}/issues`).then(response => {\r\n            setIssues(response.data);\r\n        });\r\n    }, [params.repository]);\r\n\r\n    return (\r\n        <>\r\n            <Header>\r\n                <img src={logoImg} alt=\"Github Explorer\"/>\r\n                <Link to=\"\">\r\n                    <FiChevronLeft size={16} />\r\n                    Voltar\r\n                </Link>\r\n            </Header>\r\n\r\n            { repository ? (\r\n                <RepositoryInfo>\r\n                    <header>\r\n                        <img \r\n                            src={repository.owner.avatar_url}\r\n                            alt={repository.owner.login}\r\n                        />\r\n\r\n                        <div>\r\n                            <strong>{repository.full_name}</strong>\r\n                            <p>{repository.description}</p>\r\n                        </div>\r\n                    </header>\r\n\r\n                    <ul>\r\n                        <li>\r\n                            <strong>{repository.stargazers_count}</strong>\r\n                            <span>Stars</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>{repository.forks_count}</strong>\r\n                            <span>Forks</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>{repository.open_issues_count}</strong>\r\n                            <span>Issues abertas</span>\r\n                        </li>\r\n                    </ul>\r\n                </RepositoryInfo>\r\n            ) : (\r\n                <h1>Loading...</h1>\r\n            ) }\r\n\r\n            <Issues>\r\n                {issues.map(issue => (\r\n                    <a\r\n                        target=\"_blank\"\r\n                        key={issue.id} \r\n                        href={issue.html_url}\r\n                    >\r\n                        <div>\r\n                            <strong>{issue.title}</strong>\r\n                            <p>{issue.user.login}</p>\r\n                        </div>\r\n\r\n                        <FiChevronRight size={20} />\r\n                    </a>  \r\n                ))}\r\n            </Issues>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Repository;\r\n","C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\services\\api.ts",[],"C:\\www\\Typescript\\GoStack\\aulas\\primeiro-projeto-react\\src\\pages\\Repository\\styles.ts",[],{"ruleId":null,"fatal":true,"severity":2,"message":"43","line":17,"column":0},{"ruleId":"44","severity":1,"message":"45","line":12,"column":11,"nodeType":"46","messageId":"47","endLine":12,"endColumn":21},{"ruleId":"48","severity":1,"message":"49","line":10,"column":10,"nodeType":"46","messageId":"50","endLine":10,"endColumn":15},{"ruleId":"51","severity":1,"message":"52","line":99,"column":25,"nodeType":"53","endLine":99,"endColumn":40},"Parsing error: Unexpected token. Did you mean `{'}'}` or `&rbrace;`?","@typescript-eslint/no-redeclare","'Repository' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'title' is defined but never used.","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute"]